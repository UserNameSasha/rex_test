# NameError - ошибка связанная с неверным указанием имени
# SyntaxError - ошибка связанная с нарушение правил написания кода
# IndentationError - ошибка связанная с нарушением отступов
# ZeroDivisionError: division by zero - ошибка деление на 0

# выражение - это любая строка которую можно вычислить до определенного значения
# целые int
# Вещественные числа float — это числа, у которых есть дробная часть 3.14
# логические bool
# строка str
# константа - это неизменяемое значение переменной, пишется заглавными буквами PI = 3.14
# + сложение  1 + 1 = 2  сумма
# - вычитание 1 - 1 = 0  разность 
# * умножение 2 * 2 = 4  произведение
# / деление 5 / 2 = 2,5  частное
# ** возведеине в степень 5 ** 2 = 25
# // целочисленное деление 5 // 2 = 2
# % остаток от деления 5 % 2 = 1
# магическое число - это данные которые используются без переменных  a = 5
                                                                   # print(3.14 * 5) - 3.14 - магическое число

#Snake_case  - стиль когда слова разделяются нижним подчеркиванием                my_name
#Camel case  - стиль когда первое слово с маленькой буквы а последующие с большой myName
#Pascal case - как Camel case, но первое слово тоже с большой                     MyName
#Upper case  - стиль когда все буквы заглавные                                    MY_NAME


print()             # ДЛЯ ПРОБЕЛА МЕЖДУ СТРОК





print('ЦИКЛЫ')      #IF - ELIF - ELSE ---------------------------------------------------------------
a = 10
if a >= 10:         # УСЛОВИЕ ЦИКЛА
    print('Hello')  # ТЕЛО ЦИКЛА
elif a < 10:
    print('Bye')
else:
    print(20)

print()              # ДЛЯ ПРОБЕЛА МЕЖДУ СТРОК

print("ОПЕРАТОРЫ AND и OR")#---------------------------------------------------------------

print("AND")#------------------------------------------------------------------------------
age = 20
status = True
if age >= 20 and status == False:
    print("Welcome")
#оператор and СРАБОТАЕТ ЕСЛИ ВСЕ УСЛОВИЯ =TRUE

print("OR")#--------------------------------------------------------------------------------
age = 20
status = False
if age >= 20 or status:
    print("Welcome")
#оператор or СРАБОТАЕТ ЕСЛИ хотябы одно из условий =TRUE

print()# ДЛЯ ПРОБЕЛА МЕЖДУ СТРОК

print("ЦИКЛ WHILE")#-------------------------------------------------------------------------
x = 1
while x < 5:
    print(x)
    x += 1
#break- для принудительной остановки цикла

print() # ДЛЯ ПРОБЕЛА МЕЖДУ СТРОК

print("ЦИКЛ FOR")#----------------------------------------------------------------------------
num_list = [1, 2, 3, 4, 5]
for number in num_list:
    print(number)

print() # ДЛЯ ПРОБЕЛА МЕЖДУ СТРОК

# f - (форматирование строки, ИНТЕПОЛЯЦИЯ) позволяет отоброжать различные типы в str
print("F-строка")#----------------------------------------------------------------------------

name = "Alice"
age = 25
print(f"Привет, меня зовут {name} и мне {age} лет.") # Создаем f-строку

b = 5
titles = f"{b} new sms"
print(titles)

store = 'App Store'
what_is_it = f'{store} - магазин приложений'
print(what_is_it)  # Результат: App Store - магазин приложений

print() # ДЛЯ ПРОБЕЛА МЕЖДУ СТРОК

print("СПИСКИ")#------------------------------------------------------------------------
list = [1, 2, 3, True, "Hello", 6.7] #СОЗДАНИЕ списка/массива
print(list)

todo = [] #создание пустого скиска
print(todo)

#list[0] = 100 - меняем значение в ячейке № 0
#можно создовать списки в списках list = [1, 2, 3, True, "Hello", 6.7, [3, 9]]
#print(list[6]) - выведет в консоль список в списке
#list.append(100) - добавление данных в конец списка
#list.insert(1, 100) - добавление новых данных в ячейку 1 (со смещение последующих элементов)
#list.reverse() - отоброжает элементы списка в зеркальном порядке
#list.sort() - сортировка элементов по возврастанию
#list.pop() - удаляет последний элемент
#list.remove("Hello") -удаляет опредделенный элемент
#list.clean() - полностью удаляет элементы списка
#print(len(list)) - показывает длинну списка
#print(list.count("Hello")) - показывает сколько есть указанных элементов в списке

#numbers = [1, 2, 3, 4, 5] -------подсчет суммы в списке
#total = 0
#for number in numbers:
    #total += number
#print(total)



print() # ДЛЯ ПРОБЕЛА МЕЖДУ СТРОК#---------------------------------------------------------------

a = 5
b = 5
print(a == b) # == Оператор сравнения, результат либо True либо False

a = 10
b = 9
print(a == b)

print() # ДЛЯ ПРОБЕЛА МЕЖДУ СТРОК

# Функция Type показывает типы данных------------------------------------------------------------
x = 5.8
s = "Hello"
print(type(x), type(s)) #Type показывает типы данных

# Имена переменных:
#1) Имена должны быть существительными(отвечать на вопрос Кто? Что?)
#2) Имена должны отрожать суть данных
#3) Должны начинаться на буквы латинского алфавита, могут содержать _ и цифры

print() # ДЛЯ ПРОБЕЛА МЕЖДУ СТРОК

print("Функции sep и end")#---------------------------------------------------------------------
# Функции Print()
# sep - разделитель между данными( используется когда есть минимум 2 аргумента)
# end - завершающий символ или строки (по умолчанию это \n(новая строка))

print("sep")
# sep
a = 1
b = 2.3
print(a, b, sep=" / ")

print()

print("end")
# end
print("Hello", end=" ")# end применяется только там где написан------------------------------------
print("World!")

print()
print("input")
#Функция input - это ввод от пользователя(независимо от входных данных, вывод всегда будет иметь тип данных str)
a = input("Введите данные: ")
print(a, type(a))

# ИЗВЛЕЧЕНИЕ СИМВОЛА ИЗ СТРОКИ---------------------------------------------------------------------------

#Оператор индексации [] возвращает символ строки по указанному индексу. Индексация начинается с 0

text = "Привет, мир!"
first_char = text[0] # Извлекаем символ с индексом 0
print(first_char)  # Рзультат: П

#ИЗВЛЕЧЕНИЕ ПОСЛЕДНЕГО СИМВОЛА СТРОКИ---------------------------------------------------------------------
#Если необходимо извлечь элемент из конца строки, то можно использовать отрицательные индексы,
#где -1 обозначает последний символ строки, -2 - предпоследний символ и т.д.
#Например, если у нас есть фраза "Привет, мир", мы можем использовать отрицательный индекс,
#чтобы получить последний символ строки:

first_name = 'Привет, мир'
print(first_name[-1])  # Результат: р ИЗВЛЕЧЕНИЕ ПОСЛЕДНЕГО СИМВОЛА СТРОКИ

#Индекс для извлечения символов из строки не ограничивается конкретным числом и может быть задан с помощью переменной.
#Например, в следующем примере мы используем переменную index в качестве индекса, чтобы извлечь первый символ из строки:

first_name = 'Иван'
index = 2
print(first_name[index])  # => И

#СРЕЗ СТРОКИ----------------------------------------------------------------------------------------------
#Синтаксис срезов строк в Python: str[start:end], где start - индекс символа, с которого начинается срез (включительно),
# end - индекс символа, на котором заканчивается срез (не включительно).

date = '01-05-1994'
year = date[6:10]
print(year)  # => '1994'

#Механизм срезов имеет большое количество вариаций. Если не указать вторую границу, то извлечение произойдет до
# конца строки, а если не указать первую, то с начала строки:

value = 'Привет'
one = value[3:]
two = value[:3]

print(one) # 'вет'
print(two) # 'При'

#Также можно использовать отрицательные индексы, тогда отсчет будет идти с обратной стороны:

value = 'Привет'
# Правая граница отрицательная. Считаем -1 от конца строки
one = value[3:-1]  # 'ве'
# Левая граница отрицательная. Считаем -5 от конца строки
two = value[-5:3]  # 'ри'

print(one) # 'ве'
print(two) # 'ри'

#В срезах два обязательных параметра, но иногда используется и третий - шаг извлечения.
#По умолчанию он равен единице, но его можно изменить:

value = 'Привет'
text = value[1:5:2]  # рв
# 1:5 это 'риве'
# шаг 2 это каждый второй, то есть 'р' и 'в'

print(text) # 'рв'

#Шаг извлечения так же можно использовать без указания границы начала или конца.

value = 'Привет'
one = value[:5:2]  # 'Пие'
two = value[1::2]  # 'рвт'

print(one) # 'Пие'
print(two) # 'рвт'

#В шаге можно задавать и отрицательное число. При использовании отрицательного шага извлечение идет в обратном порядке.
# Такая операция называется переворот строки. Например, строка "Привет" станет строкой "тевирП":

value = 'Привет'
text = value[::-1]  # Не указываем обе границы

print(text) # 'тевирП'

#В случае использования отрицательного шага границы среза указываются в обратном порядке: сначала правая граница
# затем левая.

value = 'Привет'
# Символ с индексом 1 не будет включен в подстроку
text = value[3:1:-1]

print(text) # 'ви'

#Python позволяет указывать срезы строк не только через числа,но и с использованием переменных.
#Это очень удобно, когда индексы среза неизвестны заранее и их нужно вычислить в ходе выполнения программы.
#Для этого мы можем определить переменные, в которых будут храниться значения начала и конца среза.
# Например, вместо того чтобы написать value[1:5], мы можем создать две переменные start и end,
# и написать value[start:end].

value = 'Привет'
start = 1
end = 5
print(value[start:end])  # 'риве'


#Multi-line строки в Python позволяют объявлять строки, которые занимают несколько строк в коде.
#Для объявления многострочной строки в Python используют тройные кавычки: """...""" или '''...'''.
# При этом внутри кавычек можно использовать любые символы, включая кавычки и специальные символы.
print("""Это многострочная
строка в Python.
Она занимает несколько
строк в коде.
""")# Пример многострочной строки

# ПЕРЕНОС СТРОКИ  \n
print('Пример текста,\nсостоящего из\nнескольких строк') # Используем символ переноса строки

#Функция - это блок кода в программе, который выполняет определенную задачу
# и может быть вызван из других частей программы. Функции используются для разделения программы на более мелкие,
# логически связанные части, которые могут быть повторно использованы в разных местах программы.

#функцию round() в Python, которая используется для округления чисел до заданного количества десятичных знаков.

# Округление числа до целого (без второго аргумента)
result = round(5.6)
print(result)  # вывод: 6

# Округление числа до 1 десятичного знака
result = round(3.14159, 1)
print(result)  # вывод: 3.1

# Округление числа до 2 десятичных знаков
result = round(3.14159, 2)
print(result)  # вывод: 3.14